
const { S3Client, PutBucketNotificationConfigurationCommand } = require('@aws-sdk/client-s3');
const response = require('./cfn-response');

exports.handler = function(event, context, callback) {
    
    const s3 = new S3Client({});
    
    const putConfigRequest = function(notificationConfiguration) {
        return new Promise(function(resolve, reject) {
            
            const command = new PutBucketNotificationConfigurationCommand({
                Bucket: event.ResourceProperties.BucketName,
                NotificationConfiguration: notificationConfiguration
            });
            
            s3.send(command).then(function(result) {
                resolve(result);
            }).catch(function(error) {
                reject(error);
            });
        });
    };

    const newNotificationConfig = {};
    if (event.RequestType !== 'Delete') {
        newNotificationConfig.LambdaFunctionConfigurations = [{
            Events: [ 's3:ObjectCreated:*' ],
            LambdaFunctionArn: event.ResourceProperties.TargetLambdaArn || 'missing_arn',
            Filter: { Key: { FilterRules: [ { Name: 'prefix', Value: event.ResourceProperties.ReportKey } ] } }
        }];
    }

    putConfigRequest(newNotificationConfig).then(function(result) {
        response.send(event, context, response.SUCCESS, result);
        callback(null, result);
    }).catch(function(error) {
        response.send(event, context, response.FAILED, error);
        console.log(error);
        callback(error);
    });
};